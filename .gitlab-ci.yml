stages:
  - build-container
  - deploy

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE
docker-build:
  image: docker:latest
  stage: build-container
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

  
deploy-dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - 'which ssh-agent || ( apk update && apk add --no-cache openssh )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_DEV} "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && cd ~/jabulMart/m-authentication && git checkout staging && git pull && docker container stop m-authentication || true && docker rm -f m-authentication || true && docker pull $IMAGE_TAG && docker run -d -e PORT=:8080 -e DB_USER=${DEV_DB_USER} -e DB_PASS=${DEV_DB_PASS} -e DB_HOST=${DEV_DB_HOST} -e DB_PORT=${DEV_DB_PORT} -e DB_NAME=${DEV_DB_NAME} -p 8080:8080 --restart=always --name m-authentication-dev --network mynet $IMAGE_TAG"
  only:
    - dev
